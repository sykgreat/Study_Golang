package HashMap

import (
	"bytes"
	"crypto/sha256"
	"encoding"
	"fmt"
	"hash"
	"log"
	"testing"
	"unsafe"

	"github.com/mitchellh/hashstructure"
)

type User struct {
	Name   string
	Age    int
	Sex    bool
	Friend []User
}

//func init() {
//	var user = User{
//		Name: "张三",
//		Age:  18,
//		Sex:  true,
//	}
//	fmt.Println(Memhash(unsafe.Pointer(&user), 1, 36))
//
//	fmt.Println(Strhash(user.Name))
//}

func Test_HashCode(t *testing.T) {
	var user = &User{
		Name: "张三",
		Age:  18,
		Sex:  true,
	}
	fmt.Println(Memhash(unsafe.Pointer(&user), 1, 36))

	fmt.Println(Strhash(user.Name))
}

func Test_hashcrc32sha256BinaryMarshaler(t *testing.T) {
	const (
		example1 = "this is a example "
		example2 = "second example"
	)

	var firstHash hash.Hash
	firstHash = sha256.New()
	firstHash.Write([]byte(example1))
	marshaler, ok := firstHash.(encoding.BinaryMarshaler)
	if !ok {
		log.Fatal("first Hash is not generated by encoding.BinaryMarshaler")
	}

	data, err := marshaler.MarshalBinary()
	if err != nil {
		log.Fatal("failure to create first Hash:", err)
	}

	var secondHash hash.Hash
	secondHash = sha256.New()
	unmarshaler, ok := secondHash.(encoding.BinaryUnmarshaler)
	if !ok {
		log.Fatal("second Hash is not generated by encoding.BinaryUnmarshaler")
	}
	if err := unmarshaler.UnmarshalBinary(data); err != nil {
		log.Fatal("failure to create hash:", err)
	}

	firstHash.Write([]byte(example2))
	secondHash.Write([]byte(example2))
	fmt.Printf("%x\n", firstHash.Sum(nil))
	fmt.Printf("%x\n", secondHash.Sum(nil))
	fmt.Println(bytes.Equal(firstHash.Sum(nil), secondHash.Sum(nil)))
}

func Test_CreateHashMultiple(t *testing.T) {
	multiple := CreateHashMultiple([]byte("Check"), []byte("Hash"))
	fmt.Printf("%x\n", multiple)
}

func Test_HashStructure(t *testing.T) {
	HashStructure1()
	HashStructure2()
}

func HashStructure1() {
	var user = User{
		Name: "张三",
		Age:  18,
		Sex:  true,
	}
	h, err := hashstructure.Hash(user, nil)
	if err != nil {
		panic(err)
	}
	fmt.Printf("%d\n", h)
}

func HashStructure2() {
	var user = User{
		Name: "张三",
		Age:  18,
		Sex:  true,
	}
	h, err := hashstructure.Hash(user, nil)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%d\n", h)
}

func Test_Sha(t *testing.T) {
	str1 := "hello"
	str2 := "world"
	str := "hello world"
	str3 := "hello world"
	fmt.Println(Sha(str1))
	fmt.Println(Sha(str2))
	fmt.Println(Sha(str))
	fmt.Println(Sha(str3))
}
